{
  "variables_and_types": {
    "title": "Variables and Basic Data Types",
    "code": "x = 5  # integer\nname = 'Alice'  # string\nis_active = True  # boolean\npi = 3.14  # float\nx = 'extra'  # string",
    "explanation": "Shows how to create variables with different data types: integer, string, boolean, float. There's no need to declare a type in Python, it will be assigned at the creation and can be overwritten as with variable 'x' in the snippet.",
    "difficulty": "beginner",
    "related": [
      "conditionals",
      "functions",
      "list_operations"
    ],
    "category": "Basics"
  },
  "list_operations": {
    "title": "List Creation and Basic Operations",
    "code": "fruits = ['apple', 'banana', 'cherry']  # create list\nfruits.append('plum')  # ['apple', 'banana', 'cherry', 'plum']\nprint(fruits[1])  # banana\nfruits.remove('apple')  # ['banana', 'cherry', 'plum']\nfruits_sorted = fruits.sort(reverse=True)  # ['plum', 'cherry', 'banana']",
    "explanation": "Creates a list, appends an item, accesses element by index, and removes an item. Last method sorts the list by descending (reverse) order.",
    "difficulty": "beginner",
    "related": [
      "dictionaries",
      "for_loop",
      "list_comprehension_basic"
    ],
    "category": "Data Structures"
  },
  "dictionaries": {
    "title": "Dictionary Basics",
    "code": "person = {'name': 'Bob', 'age': 30}  # create a dictionary\nprint(person['name'])  # Bob\nperson['age'] = 32  # {'name': 'Bob', 'age': 32}\nperson['interests'] = ['python', 'music', 'books']  # {'name': 'Bob', 'age': 30, 'interests': ['python', 'music', 'books']}\nperson.pop('name)  # {'age': 32, 'interests': ['python', 'music', 'books']}",
    "explanation": "Creates a dictionary with keys 'name' and 'age', access values by key 'name', and update value of 'age'. Next add a new item 'interests' and assign a list of values to it, and lastly remove an item from the dictionary.",
    "difficulty": "beginner",
    "related": [
      "list_operations",
      "functions",
      "conditionals"
    ],
    "category": "Data Structures"
  },
  "conditionals": {
    "title": "If-Else Conditional",
    "code": "age = 18\nif age >= 18:\n    print('Adult')\nelse:\n    print('Minor')",
    "explanation": "Checks a condition and executes code accordingly.",
    "difficulty": "beginner",
    "related": [
      "variables_and_types",
      "loops",
      "functions"
    ],
    "category": "Control Flow"
  },
  "for_loop": {
    "title": "For Loop Over a List",
    "code": "numbers = [1, 2, 3]\nfor num in numbers:\n    print(num * 2)",
    "explanation": "Loops through a list and prints each number multiplied by two.",
    "difficulty": "beginner",
    "related": [
      "conditionals",
      "list_operations",
      "list_comprehension_basic"
    ],
    "category": "Control Flow"
  },
  "functions": {
    "title": "Function Definition and Call",
    "code": "def greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('Alice'))",
    "explanation": "Defines a function that takes a parameter and returns a greeting string.",
    "difficulty": "beginner",
    "related": [
      "variables_and_types",
      "conditionals",
      "basic_class"
    ],
    "category": "Functions"
  },
  "list_comprehension_basic": {
    "title": "List Comprehension",
    "code": "[x**2 for x in range(5)]",
    "explanation": "Creates a list of squares from 0 to 4 using list comprehension.",
    "difficulty": "intermediate",
    "related": [
      "for_loop",
      "list_operations"
    ],
    "category": "Comprehensions"
  },
  "exception_handling": {
    "title": "Try-Except for Exception Handling",
    "code": "try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
    "explanation": "Catches a division by zero error and handles it gracefully.",
    "difficulty": "intermediate",
    "related": [
      "conditionals",
      "functions"
    ],
    "category": "Error Handling"
  },
  "file_reading": {
    "title": "Read a File",
    "code": "with open('file.txt', 'r') as file:\n    contents = file.read()\n    print(contents)",
    "explanation": "Opens a text file and prints its contents.",
    "difficulty": "intermediate",
    "related": [
      "exception_handling",
      "functions"
    ],
    "category": "File I/O"

  },
  "basic_class": {
    "title": "Basic Class Definition",
    "code": "class Person:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        return f'Hi, I am {self.name}'\n\np = Person('Alice')\nprint(p.greet())",
    "explanation": "Defines a class with an initializer and a method, then creates and uses an object.",
    "difficulty": "intermediate",
    "related": [
      "functions",
      "variables_and_types"
    ],
    "category": "OOP"
  }
}